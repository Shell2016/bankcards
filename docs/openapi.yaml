---
openapi: "3.1.0"
info:
  title: "OpenAPI definition"
  version: "v0"
servers:
- url: "http://localhost:8080"
  description: "Generated server url"
tags:
- name: "Users"
  description: "User management API"
- name: "Cards"
  description: "Cards management API"
paths:
  /api/v1/users/{id}:
    get:
      tags:
      - "Users"
      summary: "Get user by ID"
      description: "Retrieve a user by their ID"
      operationId: "getOneById"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "User found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDto"
        "404":
          description: "User not found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDto"
    put:
      tags:
      - "Users"
      summary: "Update user role"
      description: "Update user role by ID"
      operationId: "updateRole"
      parameters:
      - name: "id"
        in: "path"
        description: "User ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "role"
        in: "query"
        description: "New role"
        required: true
        schema:
          type: "string"
          enum:
          - "USER"
          - "ADMIN"
      responses:
        "200":
          description: "User role updated successfully"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDto"
        "404":
          description: "User not found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDto"
    delete:
      tags:
      - "Users"
      summary: "Delete user"
      description: "Delete a user by ID"
      operationId: "delete"
      parameters:
      - name: "id"
        in: "path"
        description: "User ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "204":
          description: "User deleted successfully"
        "404":
          description: "User not found"
  /api/v1/cards/{id}:
    get:
      tags:
      - "Cards"
      summary: "Get card by ID"
      description: "Retrieve a card by their ID"
      operationId: "getOne"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Card found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
        "404":
          description: "Card not found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
    put:
      tags:
      - "Cards"
      operationId: "update"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardUpdateDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
  /api/v1/users:
    get:
      tags:
      - "Users"
      summary: "Get all users by filter"
      description: "Retrieve all users with pagination and filter"
      operationId: "getAllByFilter"
      parameters:
      - name: "email"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "firstName"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "lastNameStarts"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "page"
        in: "query"
        description: "Zero-based page index (0..N)"
        required: false
        schema:
          type: "integer"
          default: 0
          minimum: 0
      - name: "size"
        in: "query"
        description: "The size of the page to be returned"
        required: false
        schema:
          type: "integer"
          default: 20
          minimum: 1
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        "200":
          description: "Users retrieved successfully"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PagedModelUserDto"
    post:
      tags:
      - "Users"
      summary: "Create user"
      description: "Create a new user"
      operationId: "create"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateDto"
        required: true
      responses:
        "200":
          description: "User created successfully"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          description: "Invalid input data"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDto"
  /api/v1/cards:
    get:
      tags:
      - "Cards"
      summary: "Get all cards by filter(email)"
      description: "Retrieve all cards with pagination and filter(email"
      operationId: "getAll"
      parameters:
      - name: "userEmail"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "page"
        in: "query"
        description: "Zero-based page index (0..N)"
        required: false
        schema:
          type: "integer"
          default: 0
          minimum: 0
      - name: "size"
        in: "query"
        description: "The size of the page to be returned"
        required: false
        schema:
          type: "integer"
          default: 20
          minimum: 1
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        "200":
          description: "Cards retrieved successfully"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PagedModelCardDto"
    post:
      tags:
      - "Cards"
      summary: "Create card"
      description: "Create a new card"
      operationId: "create_1"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardCreateDto"
        required: true
      responses:
        "200":
          description: "Card created successfully"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
        "400":
          description: "Invalid input data"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
components:
  schemas:
    UserDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        email:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        role:
          type: "string"
          enum:
          - "USER"
          - "ADMIN"
    CardUpdateDto:
      type: "object"
      properties:
        status:
          type: "string"
          enum:
          - "ACTIVE"
          - "BLOCKED"
          - "EXPIRED"
        balance:
          type: "number"
    CardDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        maskedCardNumber:
          type: "string"
        expiryDate:
          type: "string"
          format: "date"
        status:
          type: "string"
          enum:
          - "ACTIVE"
          - "BLOCKED"
          - "EXPIRED"
        balance:
          type: "number"
    UserCreateDto:
      type: "object"
      properties:
        email:
          type: "string"
          format: "email"
          minLength: 1
        firstName:
          type: "string"
          minLength: 1
        lastName:
          type: "string"
          minLength: 1
        password:
          type: "string"
          minLength: 1
        role:
          type: "string"
          enum:
          - "USER"
          - "ADMIN"
      required:
      - "email"
      - "firstName"
      - "lastName"
      - "password"
      - "role"
    CardCreateDto:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int64"
        balance:
          type: "number"
    PageMetadata:
      type: "object"
      properties:
        size:
          type: "integer"
          format: "int64"
        number:
          type: "integer"
          format: "int64"
        totalElements:
          type: "integer"
          format: "int64"
        totalPages:
          type: "integer"
          format: "int64"
    PagedModelUserDto:
      type: "object"
      properties:
        content:
          type: "array"
          items:
            $ref: "#/components/schemas/UserDto"
        page:
          $ref: "#/components/schemas/PageMetadata"
    PagedModelCardDto:
      type: "object"
      properties:
        content:
          type: "array"
          items:
            $ref: "#/components/schemas/CardDto"
        page:
          $ref: "#/components/schemas/PageMetadata"
